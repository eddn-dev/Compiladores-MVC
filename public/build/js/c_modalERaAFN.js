function handleAplicarERaAFN(e){handleAFNModal(e,{fields:[{name:"automatonId",selector:"#automaton-id",alertSelector:"#automaton-id-alert",validate:e=>e?/^[0-9]+$/.test(e)?parseInt(e)<=0?"El ID debe ser un número positivo.":AFNS.some((r=>r.ID_AFN===e))?"El ID ya existe. Elige otro.":null:"El ID solo puede contener números.":"El ID es obligatorio."},{name:"regexInput",selector:"#regex-input",alertSelector:"#regex-input-alert",validate:e=>e&&""!==e.trim()?null:"La expresión regular es obligatoria."}],onSubmit:(r,a)=>{const o=r.automatonId.value.trim(),t=r.regexInput.value.trim();try{const r=new ExpresionRegular(t);if(r.parse()){const a=r.getResult();a.ID_AFN=o,AFNS.push(a),actualizarSelectsDeAFN(),mostrarNotificacion("AFN generado exitosamente a partir de la expresión regular.","success"),closeModal(e)}else mostrarNotificacion("Error en el análisis de la expresión regular. Verifique la sintaxis.","error")}catch(e){mostrarNotificacion("Error al generar el AFN: "+e.message,"error")}},successMessage:"AFN generado exitosamente a partir de la expresión regular.",errorMessage:"Por favor, corrige los errores antes de continuar."})}