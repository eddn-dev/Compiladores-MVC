async function cargarAutomataDesdeArchivo(e){try{const r=await fetch(e);if(!r.ok)throw new Error(`Error al cargar el archivo: ${r.statusText}`);const a=await r.text();return parseAFDFile(a)}catch(e){throw console.error("Error al cargar el autómata:",e),e}}function parseAFDFile(e){const r=e.split("\n").filter((e=>""!==e.trim())),a=[];for(let e=0;e<r.length;e++){const t=r[e].split(",");if(258!==t.length)throw new Error(`La línea ${e+1} no tiene 258 columnas.`);const o=t.map((e=>parseInt(e.trim())));if(o.some((e=>isNaN(e))))throw new Error(`Valores inválidos en la línea ${e+1}.`);a.push(o)}return a}function handleAplicarERaAFN(e){handleAFNModal(e,{fields:[{name:"automatonId",selector:"#automaton-id",alertSelector:"#automaton-id-alert",validate:e=>e?/^[0-9]+$/.test(e)?parseInt(e)<=0?"El ID debe ser un número positivo.":AFNS.some((r=>r.ID_AFN===e))?"El ID ya existe. Elige otro.":null:"El ID solo puede contener números.":"El ID es obligatorio."},{name:"regexInput",selector:"#regex-input",alertSelector:"#regex-input-alert",validate:e=>null==e?"La expresión regular es obligatoria.":null}],onSubmit:async(r,a)=>{const t=r.automatonId.value,o=r.regexInput.value;try{const r=await cargarAutomataDesdeArchivo("/build/utils/ER_AFN.txt");if(window.expReg?window.expReg.AL.matrizTransicionAFD=r:window.expReg=new ExpresionRegular("",r),window.expReg.setER(o),window.expReg.parse()){const r=window.expReg.getResult();r.ID_AFN=t,AFNS.push(r),actualizarSelectsDeAFN(),mostrarNotificacion("AFN generado exitosamente a partir de la expresión regular.","success"),closeModal(e)}else mostrarNotificacion("Error en el análisis de la expresión regular. Verifique la sintaxis.","error")}catch(e){mostrarNotificacion("Error al cargar el autómata: "+e.message,"error")}},successMessage:"AFN generado exitosamente a partir de la expresión regular.",errorMessage:"Por favor, corrige los errores antes de continuar."})}